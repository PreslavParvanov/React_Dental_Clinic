// <auto-generated />
using System;
using DentalClinic.DB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DentalClinic.DB.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221211195544_add_role")]
    partial class add_role
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DentalClinic.DB.Data.Models.DentalService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ServiceDescription")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.Property<string>("Who")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DentalServices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fdc99e42-133a-4267-acc7-5bc05f1881e8"),
                            ServiceDescription = "",
                            ServiceName = "Surgical operations",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(5092),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("3203e4de-5a4d-4004-a944-51d41dd6ca08"),
                            ServiceDescription = "",
                            ServiceName = "Dental implants",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(5098),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("94fde0d3-c15a-409a-9aff-78f0b9882844"),
                            ServiceDescription = "",
                            ServiceName = "Complete changeover",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(5101),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("629b5a7e-1622-462b-a98a-3084a0e94cc9"),
                            ServiceDescription = "",
                            ServiceName = "Aesthetic fillings",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(5104),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("9b40d9a0-8966-49ea-83ae-b9df809e085f"),
                            ServiceDescription = "",
                            ServiceName = "Veneers",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(5107),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("fba6cec7-be5c-4286-b972-00f84884e171"),
                            ServiceDescription = "",
                            ServiceName = "Ceramic inlays",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(5111),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("2207ea99-c652-489f-983c-b82efe932656"),
                            ServiceDescription = "",
                            ServiceName = "Crowns and bridges",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(5114),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("717e2e46-322d-4878-875a-a2118721f557"),
                            ServiceDescription = "",
                            ServiceName = "Tooth extraction",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(5120),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("2eddbb73-df17-4c50-986b-b4de45f78b96"),
                            ServiceDescription = "",
                            ServiceName = "Prosthesis",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(5123),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("7713c5b8-7e8b-488f-ac4d-caa941397166"),
                            ServiceDescription = "",
                            ServiceName = "Orthodontic treatment/braces and splints",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(5126),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("b01e56b1-de57-4782-8fe4-e75aa7fd9cc8"),
                            ServiceDescription = "",
                            ServiceName = "Teeth whitening",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(5130),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("877fe45d-1dfd-4ab5-9b92-39287a62a009"),
                            ServiceDescription = "",
                            ServiceName = "Glass supports",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(5132),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        });
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<string>("MoreInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.Property<string>("Who")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Doctors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1bdf282-1def-48f0-9063-454ad4055ef3"),
                            IsActive = (byte)1,
                            MoreInfo = "Doctor Radeva has 5 years of experience as a dentist.",
                            Name = "Dr. Radeva",
                            Qualification = "Dentist",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(4995),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        },
                        new
                        {
                            Id = new Guid("7ec1e619-3cb3-46c9-b239-01b03f8e19a3"),
                            IsActive = (byte)1,
                            MoreInfo = "Doctor Valeva has 3 years of experience as a оrthodontist.",
                            Name = "Dr. Valeva",
                            Qualification = "Оrthodontist",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(5018),
                            Who = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa"
                        });
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.DoctorCustomer", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasKey("DoctorId", "CustomerId", "DateTime");

                    b.HasIndex("UserId");

                    b.ToTable("DoctorsCustomers");
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.DoctorSchedule", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ScheduleDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsBusy")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.Property<string>("Who")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId", "ScheduleDateTime");

                    b.HasIndex("UserId");

                    b.ToTable("DoctorsSchedules");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "3a3caf80-c223-498d-901b-c8fc4504bb3f",
                            ConcurrencyStamp = "72cb2f57-6699-43d9-82c6-fe1c682dec3e",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("IsActive")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("When")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "0f14ce82-fd75-4d7e-b5c1-6eaccb374faa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b6a74258-6d17-4474-abb8-407e7807f5c7",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "Admin@123",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ab3ac95d-d599-4e3a-8ab4-0b466ab7ce76",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com",
                            FirstName = "admin",
                            IsActive = (byte)1,
                            LastLogin = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(4846),
                            LastName = "admin",
                            When = new DateTime(2022, 12, 11, 21, 55, 44, 323, DateTimeKind.Local).AddTicks(4802)
                        });
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.DentalService", b =>
                {
                    b.HasOne("DentalClinic.DB.Data.Models.User", null)
                        .WithMany("DentalServices")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.Doctor", b =>
                {
                    b.HasOne("DentalClinic.DB.Data.Models.User", null)
                        .WithMany("Doctors")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.DoctorCustomer", b =>
                {
                    b.HasOne("DentalClinic.DB.Data.Models.Doctor", "Doctors")
                        .WithMany("DoctorCustomers")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DoctorCustomers_Doctors");

                    b.HasOne("DentalClinic.DB.Data.Models.User", null)
                        .WithMany("DoctorCustomers")
                        .HasForeignKey("UserId");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.DoctorSchedule", b =>
                {
                    b.HasOne("DentalClinic.DB.Data.Models.Doctor", "Doctors")
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DoctorSchedules_Doctors");

                    b.HasOne("DentalClinic.DB.Data.Models.User", null)
                        .WithMany("DoctorSchedules")
                        .HasForeignKey("UserId");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.Doctor", b =>
                {
                    b.Navigation("DoctorCustomers");

                    b.Navigation("DoctorSchedules");
                });

            modelBuilder.Entity("DentalClinic.DB.Data.Models.User", b =>
                {
                    b.Navigation("DentalServices");

                    b.Navigation("DoctorCustomers");

                    b.Navigation("DoctorSchedules");

                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
